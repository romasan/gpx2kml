#!/usr/bin/env node
const convert = require('../src/index.js')
const package = require('../package.json')

function write(text, file) {
  if (file) {
    eval('require')('fs').writeFileSync(file, text)
  } else {
    process.stdout.write(text)
  }
}

if ((typeof process !== 'undefined') && (process.release && process.release.name === 'node')) {
  const yargs = require('yargs/yargs')
  const hideBin = require('yargs/helpers').hideBin
  const argv = yargs(hideBin(process.argv)).argv
  if (argv.v) {
    console.log(package.version)
    return
  }

  if (!process.stdin.isTTY) {
    let data = ''
    process.stdin.on('readable', function() {
        const chunk = this.read();
        if (chunk !== null) {
          data += chunk;
        }
    });
    process.stdin.on('end', function() {
      const output = convert(data.trim())
      write(output, argv.o)
    });
  }

  const file = argv._ && argv._[0]
  const multiple = argv._.length > 1

  if (multiple) {
    for (const file of argv._) {
      if (file && eval('require')('fs').existsSync(file)) {
        const outputName = file.replace(/.gpx$/, '') + '.kml'
        const text = eval('require')('fs').readFileSync(file, { encoding: 'utf-8' })
        const output = convert(text)
        write(output, outputName)
      }
    }
  } else if (file && eval('require')('fs').existsSync(file)) {
    const text = eval('require')('fs').readFileSync(file, { encoding: 'utf-8' })
    const output = convert(text)
    write(output, argv.o)
  } else {
    const proc = process.stdin.on('readable', () => {
      let text = ''
      let chunk
      while ((chunk = process.stdin.read()) !== null) {
        text += chunk.toString()
      }
      if (text) {
        const output = convert(text)
        write(output, argv.o)
        process.exit(proc.fd)
      }
    })
  }
}
